annotation_logticks() +
labs(x = "Degree", y = "Cumulative distribution function") +
scale_color_manual(name = "Distribution", labels= c("Log-normal", "Power-law", "Weibull"), values = col_palette, breaks = c("a", "b", "c")) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = c(0.25, 0.23),
legend.background = element_rect(fill=alpha('transparent', 0)),
plot.title = element_text(face = "bold"),
aspect.ratio = 1) +
ggtitle("A")
all <- plot_grid(plt1, plt2, ncol = 2, align = "v")
save_plot("../figures/tmp.pdf", all, base_width = 10)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/degree.pdf"))
system("rm ../figures/tmp.pdf")
plt2 <- ggplot(data = df, aes(x = deg, y = clu)) +
geom_point(size = 0.5) +
geom_smooth(aes(colour = "a"), method = "lm", se = FALSE, size = 1) +
scale_colour_manual(values = col_palette) +
scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), labels = scales::trans_format("log10", scales::math_format(10^.x))) +
annotation_logticks() +
labs(x = "Degree", y = "Clustering coefficient") +
theme_bw() +
theme(legend.position = "none",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"),
aspect.ratio = 1) +
ggtitle("B")
plt2
all <- plot_grid(plt1, plt2, ncol = 2, align = "v")
save_plot("../figures/tmp.pdf", all, base_width = 10)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/degree.pdf"))
system("rm ../figures/tmp.pdf")
# Figure 2
data <- read_tsv(file = "../data/networks_statistics.txt")
p1 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = n_nodes, color = "n_nodes"), size = 1.5) +
geom_line(aes(y = n_edges / 25, color = "n_edges"), size = 1.5) +
scale_y_continuous("Number of nodes", sec.axis = sec_axis(~. * 25, name = "Number of edges", labels=comma), labels = comma) +
scale_color_manual(labels= c("Nodes", "Edges"), values = col_palette, breaks = c("n_edges", "n_nodes")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("A")
p1
p2 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = ave_deg, color = "ave_deg"), size = 1.5) +
geom_line(aes(y = cen * 140, color = "cen"), size = 1.5) +
scale_y_continuous("Average Degree", sec.axis = sec_axis(~. / 140, name = "Average centrality", labels=comma), labels = comma) +
scale_color_manual(labels= c("Degree", "Centrality"), values = col_palette, breaks = c("ave_deg", "cen")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("B")
p2
p2 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = ave_deg, color = "ave_deg"), size = 1.5) +
geom_line(aes(y = cen * 14, color = "cen"), size = 1.5) +
scale_y_continuous("Average Degree", sec.axis = sec_axis(~. / 14, name = "Average centrality", labels=comma), labels = comma) +
scale_color_manual(labels= c("Degree", "Centrality"), values = col_palette, breaks = c("ave_deg", "cen")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("B")
p2
p2 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = ave_deg, color = "ave_deg"), size = 1.5) +
geom_line(aes(y = cen * 140, color = "cen"), size = 1.5) +
scale_y_continuous("Average Degree", sec.axis = sec_axis(~. / 140, name = "Average centrality", labels=comma), labels = comma) +
scale_color_manual(labels= c("Degree", "Centrality"), values = col_palette, breaks = c("ave_deg", "cen")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("B")
p2
data
g
alpha_centrality(g)
?alpha_centrality
i
i <- 1
file <- files[i]
data <- readMM(file)
g <- graph_from_adjacency_matrix(adjmatrix = data, mode = "undirected", weighted = TRUE)
adj <- get.adjacency(g, sparse = FALSE)
mean(eigen_centrality(g, directed = FALSE)$vector)
mean(eigen_centrality(g, directed = FALSE, weights = FALSE)$vector)
mean(eigen_centrality(g, directed = FALSE, weights = NULL)$vector)
g <- graph_from_adjacency_matrix(adjmatrix = data, mode = "undirected", weighted = FALSE)
g <- graph_from_adjacency_matrix(adjmatrix = data, mode = "undirected", weighted = NULL)
adj <- get.adjacency(g, sparse = FALSE)
mean(eigen_centrality(g, directed = FALSE)$vector)
median(eigen_centrality(g, directed = FALSE)$vector)
g <- graph_from_adjacency_matrix(adjmatrix = data, mode = "undirected", weighted = TRUE)
adj <- get.adjacency(g, sparse = FALSE)
median(eigen_centrality(g, directed = FALSE)$vector)
median(betweenness(g, directed = FALSE)$vector)
median(betweenness(g, directed = FALSE))
mean(betweenness(g, directed = FALSE))
?centralization.betweenness
centr_eigen(g, directed = FALSE)
mean(centr_eigen(g, directed = FALSE)$centralization)
p3 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = apl, color = "apl"), size = 1.5) +
geom_line(aes(y = cc * 15, color = "cc"), size = 1.5) +
scale_y_continuous("Average path length", sec.axis = sec_axis(~. / 15, name = "Clustering coefficient", labels=comma), labels = comma) +
scale_color_manual(labels= c("Average path length", "Clustering"), values = cbPalette, breaks = c("apl", "cc")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("C")
# Figure 2
data <- read_tsv(file = "../data/networks_statistics.txt")
p3 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = apl, color = "apl"), size = 1.5) +
geom_line(aes(y = cc * 15, color = "cc"), size = 1.5) +
scale_y_continuous("Average path length", sec.axis = sec_axis(~. / 15, name = "Clustering coefficient", labels=comma), labels = comma) +
scale_color_manual(labels= c("Average path length", "Clustering"), values = cbPalette, breaks = c("apl", "cc")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("C")
p3
p3 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = apl, color = "apl"), size = 1.5) +
geom_line(aes(y = cc * 15, color = "cc"), size = 1.5) +
scale_y_continuous("Average path length", sec.axis = sec_axis(~. / 15, name = "Clustering coefficient", labels=comma), labels = comma) +
scale_color_manual(labels= c("Average path length", "Clustering"), values = col_palette, breaks = c("apl", "cc")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("C")
p3
p4 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = comm_size, color = "comm_size"), size = 1.5) +
geom_line(aes(y = modul * 1000, color = "modul"), size = 1.5) +
scale_y_continuous("Number of communities", sec.axis = sec_axis(~. / 1000, name = "Modularity", labels=comma), labels = comma) +
scale_color_manual(labels= c("Communities", "Modularity"), values = col_palette, breaks = c("comm_size", "modul")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("D")
p4
p4 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = comm_size, color = "comm_size"), size = 1.5) +
geom_line(aes(y = modul * 2000, color = "modul"), size = 1.5) +
scale_y_continuous("Number of communities", sec.axis = sec_axis(~. / 2000, name = "Modularity", labels=comma), labels = comma) +
scale_color_manual(labels= c("Communities", "Modularity"), values = col_palette, breaks = c("comm_size", "modul")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("D")
p4
p4 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = comm_size, color = "comm_size"), size = 1.5) +
geom_line(aes(y = modul * 500, color = "modul"), size = 1.5) +
scale_y_continuous("Number of communities", sec.axis = sec_axis(~. / 500, name = "Modularity", labels=comma), labels = comma) +
scale_color_manual(labels= c("Communities", "Modularity"), values = col_palette, breaks = c("comm_size", "modul")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("D")
p4
p4 <- ggplot(data, aes(x = year)) +
geom_line(aes(y = comm_size, color = "comm_size"), size = 1.5) +
geom_line(aes(y = modul * 1000, color = "modul"), size = 1.5) +
scale_y_continuous("Number of communities", sec.axis = sec_axis(~. / 1000, name = "Modularity", labels=comma), labels = comma) +
scale_color_manual(labels= c("Communities", "Modularity"), values = col_palette, breaks = c("comm_size", "modul")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(face = "bold"), aspect.ratio = 1) +
ggtitle("D")
p4
all <- plot_grid(p1, p2, p3, p4, ncol = 2, align = "v")
all <- plot_grid(p1, p2, p3, p4, ncol = 2, align = "v")
save_plot("../figures/tmp.pdf", all, base_height = 8, base_width = 10)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/statistics.pdf"))
system("rm ../figures/tmp.pdf")
df
cor.test(df$deg, df$clu)
round(-0.2359301, 2)
# Figure 1
data <- fread("../data/xml2txt_majr.txt", col.names = c("pmid", "year", "doi"))
# Figure 1
data <- fread("../data/xml2txt-majr.txt", col.names = c("pmid", "year", "doi"))
pmid2year <- data %>%
select(pmid, year) %>%
filter(year <= 2015) %>%
group_by(year) %>%
summarise(freq = n_distinct(pmid)) %>%
mutate(cumfreq = cumsum(freq)) %>%
select(year, cumfreq)
data <- fread("../data/mesh-coc.txt", col.names = c("doi1", "doi2", "year", "freq"))
data <- fread("../data/coc-data.txt", col.names = c("doi1", "doi2", "year", "freq"))
coc2year <- data %>%
select(year, freq) %>%
filter(year <= 2015) %>%
group_by(year) %>%
summarise(freq = sum(freq)) %>%
mutate(cumfreq = cumsum(freq)) %>%
select(year, cumfreq)
data <- inner_join(x = pmid2year, y = coc2year, by = "year") %>% filter(year <= 2014)
formatter1000 <- function(x) {
comma(x / 1000)
}
plt <- ggplot(data, aes(x = year)) +
geom_line(aes(y = cumfreq.x, color = "cumfreq.x"), size = 1.5) +
geom_line(aes(y = cumfreq.y / 3.5, color = "cumfreq.y"), size = 1.5) +
scale_y_continuous("Number of citations with MeSH terms", sec.axis = sec_axis(~. * 3.5, name = "Number of co-occurrences of MeSH terms", labels=formatter1000), labels = formatter1000) +
scale_color_manual(labels= c("Citations", "Co-occurrences"), values = cbPalette, breaks = c("cumfreq.x", "cumfreq.y")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", aspect.ratio = 1) +
coord_equal()
plt
# Figure 1
data <- fread("../data/xml2txt-majr.txt", col.names = c("pmid", "year", "doi"))
data
pmid2year <- data %>%
select(pmid, year) %>%
filter(year <= 2015) %>%
group_by(year) %>%
summarise(freq = n_distinct(pmid))
pmid2year
data <- fread("../data/coc-data.txt", col.names = c("doi1", "doi2", "year", "freq"))
coc2year <- data %>%
select(year, freq) %>%
filter(year <= 2015) %>%
group_by(year) %>%
summarise(freq = sum(freq))
coc2year
data <- inner_join(x = pmid2year, y = coc2year, by = "year") %>% filter(year <= 2014)
data
plt <- ggplot(data, aes(x = year)) +
geom_line(aes(y = freq.x, color = "cumfreq.x"), size = 1.5) +
geom_line(aes(y = freq.y / 3.5, color = "cumfreq.y"), size = 1.5) +
scale_y_continuous("Number of citations with MeSH terms", sec.axis = sec_axis(~. * 3.5, name = "Number of co-occurrences of MeSH terms", labels=formatter1000), labels = formatter1000) +
scale_color_manual(labels= c("Citations", "Co-occurrences"), values = cbPalette, breaks = c("cumfreq.x", "cumfreq.y")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", aspect.ratio = 1) +
coord_equal()
plt
data
plt <- ggplot(data, aes(x = year)) +
geom_line(aes(y = freq.x, color = "cumfreq.x"), size = 1.5) +
geom_line(aes(y = freq.y / 3.5, color = "cumfreq.y"), size = 1.5) +
scale_y_continuous("Number of citations with MeSH terms", sec.axis = sec_axis(~. * 3.5, name = "Number of co-occurrences of MeSH terms", labels=formatter1000), labels = formatter1000) +
scale_color_manual(labels= c("Citations", "Co-occurrences"), values = col_palette, breaks = c("cumfreq.x", "cumfreq.y")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", aspect.ratio = 1) +
coord_equal()
plt
plt <- ggplot(data, aes(x = year)) +
geom_line(aes(y = freq.x, color = "cumfreq.x"), size = 1.5) +
geom_line(aes(y = freq.y / 3.5, color = "cumfreq.y"), size = 1.5) +
scale_y_continuous("Number of citations with MeSH terms", sec.axis = sec_axis(~. * 3.5, name = "Number of co-occurrences of MeSH terms", labels=formatter1000), labels = formatter1000) +
scale_color_manual(labels= c("Citations", "Co-occurrences"), values = col_palette, breaks = c("cumfreq.x", "cumfreq.y")) +
labs(x = "Year") +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom", aspect.ratio = 1)
plt
ggsave("../figures/tmp.pdf", plt, base_height = 6)
ggsave("../figures/tmp.pdf", plt, height = 6)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/growth.pdf"))
system("rm ../figures/tmp.pdf")
ggsave("../figures/tmp.pdf", plt, width = 6, height = 6)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/growth.pdf"))
system("rm ../figures/tmp.pdf")
ggsave("../figures/tmp.pdf", plt, width = 8, height = 8)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/growth.pdf"))
system("rm ../figures/tmp.pdf")
ggsave("../figures/tmp.pdf", plt, width = 5, height = 5)
system(paste("pdfcrop", "../figures/tmp.pdf", "../figures/growth.pdf"))
system("rm ../figures/tmp.pdf")
setwd("~/Documents/dev/medline-evolution")
i <- 1980
# Subset data
data <- data_input %>% filter(year == i) %>% select(doi1, doi2, freq)
xml2txt_cur <- xml2txt %>% filter(year == i)
data_agg <- data %>% group_by(doi1, doi2) %>% summarize_all(sum)
# Go through co-occurrence data and compute normalized weight
tmp_tbl <- freq_data %>% filter(year == i)
dt <- data.table(tmp_tbl, key = c("doi", "year"))
doi2freq <- dt[, sum(freq), doi]
names(doi2freq) <- c("doi", "freq")
vec <- setNames(doi2freq$freq, doi2freq$doi)
setDT(data_agg)[, freq_norm := freq^2 / (vec[doi1] * vec[doi2])]
# Create graph and compute clustering
g <- graph_from_data_frame(data_agg, directed = FALSE)
g
# We cluster network with the normalized weights
E(g)$weight <- data_agg$freq_norm
cluster <- cluster_louvain(g)
# Continue with the analysis
# Compute density according to Callon's equation
density <- vector(mode = "numeric", length = length(cluster))
for (j in 1:length(cluster)) {
edges <- get_internal(graph = g, cluster = cluster, m = j)
w <- sum(membership(cluster) == j)
density[j] <- 100 * (sum(edges$weight) / w)
}
source("./computation/community-detection/scripts/functions.R")
# Continue with the analysis
# Compute density according to Callon's equation
density <- vector(mode = "numeric", length = length(cluster))
for (j in 1:length(cluster)) {
edges <- get_internal(graph = g, cluster = cluster, m = j)
w <- sum(membership(cluster) == j)
density[j] <- 100 * (sum(edges$weight) / w)
}
# Compute centrality according to Callon's equation
centrality <- vector(mode = "numeric", length = 0)
for (j in 1:length(cluster)) {
edges <- get_external(graph = g, cluster = cluster, m = j)
centrality[j] <- 10 * sum(edges$weight)
}
# Create JSON object
res_list <- list()
tab <- table(membership(cluster))
# Pack values for each cluster
for (k in 1:length(tab)) {
cent <- centrality[k]
dens <- density[k]
idx <- membership(cluster) == k
terms <- names(membership(cluster)[idx])
# Compute activity for a cluster
activity <- xml2txt_cur %>% filter(doi %in% terms) %>% summarise(n_distinct(pmid)) %>% pull
# Compute z-score
g_sub <- induced_subgraph(graph = g, vids = terms)
deg <- degree(g_sub)
z <- (deg - mean(deg)) / sd(deg)
tmp_list <- list()
for (m in 1:length(terms)) {
term <- terms[m]
name <- mesh[mesh$doi == term, ]$name
weight <- z[term]
foo <- list(dui = term, name = name, weight = weight)
tmp_list[[m]] <- foo
}
res_list[[k]] <- list(year = i, cluster = k, size = length(terms), activity = activity, centrality = cent, density = dens, terms = tmp_list)
}
# Write JSON to file
my_json <- toJSON(res_list)
file_name <- paste("./data/json/data-", i, ".json", sep = "")
write(x = my_json, file = file_name)
# Write JSON to file
my_json <- toJSON(res_list)
library(jsonlite)
# Write JSON to file
my_json <- toJSON(res_list)
file_name <- paste("./data/json/data-", i, ".json", sep = "")
write(x = my_json, file = file_name)
setwd("~/Documents/dev/medline-evolution")
files <- list.files(path = "./data/json/", pattern = "^data", full.names = TRUE)
files
files <- list.files(path = "./data/json", pattern = "^data", full.names = TRUE)
files
file <- files[1]
data <- fromJSON(txt = file, flatten = TRUE)
unlist(data[i, "year"])
i
unlist(data[1, "year"])
unlist(data[1, "cluster"])
unlist(data[1, "activity"])
unlist(data[1, "centrality"])
unlist(data[1, "density"])
unlist(data[1, "terms"])
unlist(data[2, "terms"])
unlist(data[3, "terms"])
unlist(data[4, "terms"])
unlist(data[5, "terms"])
i
# Subset data
data <- data_input %>% filter(year == i) %>% select(doi1, doi2, freq)
xml2txt_cur <- xml2txt %>% filter(year == i)
data_agg <- data %>% group_by(doi1, doi2) %>% summarize_all(sum)
# Go through co-occurrence data and compute normalized weight
tmp_tbl <- freq_data %>% filter(year == i)
dt <- data.table(tmp_tbl, key = c("doi", "year"))
doi2freq <- dt[, sum(freq), doi]
names(doi2freq) <- c("doi", "freq")
vec <- setNames(doi2freq$freq, doi2freq$doi)
setDT(data_agg)[, freq_norm := freq^2 / (vec[doi1] * vec[doi2])]
# Create graph and compute clustering
g <- graph_from_data_frame(data_agg, directed = FALSE)
# We cluster network with the normalized weights
E(g)$weight <- data_agg$freq_norm
cluster <- cluster_louvain(g)
#  Store adjacency matrix in MM format
adj <- as_adjacency_matrix(graph = g, attr = "weight", sparse = TRUE)
filename <- paste0("./data/matlab/adj-mats/adj-mat-", counter, ".mm")
writeMM(obj = adj, file = filename)
# Store mesh - cluster - idx triples for year i
membs <- as.numeric(membership(cluster))
membs_names <- names(membership(cluster))
clu_tbl <- tibble(mesh = membs_names, cluster = membs)
clu_tbl <- left_join(x = clu_tbl, y = mesh_idx, by = "mesh")
filename <- paste0("./data/matlab/clu-tabs/clu-tbl-", counter, ".txt")
write_tsv(clu_tbl, filename)
# Store modularity
modularity[counter] <- modularity(cluster)
counter <- counter + 1
# Continue with the analysis
# Compute density according to Callon's equation
density <- vector(mode = "numeric", length = length(cluster))
for (j in 1:length(cluster)) {
edges <- get_internal(graph = g, cluster = cluster, m = j)
w <- sum(membership(cluster) == j)
density[j] <- 100 * (sum(edges$weight) / w)
}
# Compute centrality according to Callon's equation
centrality <- vector(mode = "numeric", length = 0)
for (j in 1:length(cluster)) {
edges <- get_external(graph = g, cluster = cluster, m = j)
centrality[j] <- 10 * sum(edges$weight)
}
density
centrality
k
tab
length(tab)
# Create JSON object
res_list <- list()
tab <- table(membership(cluster))
tab
k == 1
k <- 1
cent <- centrality[k]
cent
for (k in 1:length(tab)) {
cent <- centrality[k]
dens <- density[k]
idx <- membership(cluster) == k
terms <- names(membership(cluster)[idx])
# Compute activity for a cluster
activity <- xml2txt_cur %>% filter(doi %in% terms) %>% summarise(n_distinct(pmid)) %>% pull
# Compute z-score
g_sub <- induced_subgraph(graph = g, vids = terms)
deg <- degree(g_sub)
z <- (deg - mean(deg)) / sd(deg)
tmp_list <- list()
for (m in 1:length(terms)) {
term <- terms[m]
name <- mesh[mesh$doi == term, ]$name
weight <- z[term]
foo <- list(dui = term, name = name, weight = weight)
tmp_list[[m]] <- foo
}
res_list[[k]] <- list(year = i, cluster = k, size = length(terms), activity = activity, centrality = cent, density = dens, terms = tmp_list)
}
res_list
res_list[[1]]
length(res_list)
tab
membership(cluster)
length(membership(cluster))
membership(cluster)
table(membership(cluster))
membership(cluster) == 1
table(membership(cluster) == 1)
table(membership(cluster) == 2)
table(membership(cluster) == 3)
table(membership(cluster) == 4)
table(membership(cluster) == 5)
table(membership(cluster) == 6)
table(membership(cluster) == 7)
table(membership(cluster) == 8)
table(membership(cluster) == 9)
table(membership(cluster) == 10)
table(membership(cluster) == 11)
table(membership(cluster) == 12)
table(membership(cluster) == 13)
table(membership(cluster))
table(membership(cluster)) > 5
table(table(membership(cluster)) > 5)
table(table(membership(cluster)) > 10)
table(table(membership(cluster)) > 100)
table(table(membership(cluster)) > 10)
density
centrality
plot(density, cntrality)
plot(density, centrality)
abline(median(density))
abline(v = median(density))
abline(h = median(centrality))
df <- tibble(density, centrality)
df
df %>% scale()
df1 <- df %>% scale()
plot(df1)
prcomp(df)
prcomp(df)$x
plot(prcomp(df)$x)
plot(df1)
plot(df1, xlim(-5,5))
plot(df1, xlim = c(-5,5))
plot(df1, xlim = c(-5,5), ylim = c(-3,3))
plot(df1, xlim = c(-3,3), ylim = c(-3,3))
centrality
scale(centrality)
density %>% scale()
density %>% scale() %>% pull
density %>% scale() %>% pull()
scale(density)
scale(density)[,1]
scale(density)[,1]
library(RmiR.Hs.miRNA)
db_list_tables(RmiR.Hs.miRNA_dbconn())
db_list_tables(RmiR.Hs.miRNA_dbfile()
)
